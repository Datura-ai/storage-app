# nginx secure server configuration to serve filesafe.org website and assets
# with an option to serve as a reverse proxy fronting storage providers

# redirect from www and any subdomains both nonsecure and secure traffic
server {
    listen 80;
    listen 443 ssl http2;
    server_name *.filesafe.org;
    # generated with `certbot certonly -d filesafe.org --webroot`
    #  /var/www/storage-app/
    ssl_certificate /etc/letsencrypt/live/filesafe.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/filesafe.org/privkey.pem;
    return 301 https://filesafe.org$request_uri;
}
# redirect nonsecure traffic
server {
    listen 80;
    server_name filesafe.org;
    return 301 https://filesafe.org$request_uri;
}
upstream filesafe { server 127.0.0.1:8000; }  # backend instance
server {
    listen 443 ssl http2;
    server_name filesafe.org;
    ssl_certificate /etc/letsencrypt/live/filesafe.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/filesafe.org/privkey.pem;
    root /var/www/storage-app/;
    access_log /var/log/filesafe.log;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $host:$server_port;
    proxy_set_header Host $host;
    proxy_redirect off;
    default_type text/html;
    location / { try_files $uri $uri/index.html @x; }
    location @x { proxy_pass http://filesafe; }
    # location /media/ { alias /mounted-disk/media/; }  # example how miner could serve files
    location ~* \.(js|css)$ { expires 7d; access_log off; }
    client_max_body_size 100M;  # max upload size
    # error_page 500 502 503 504 /50x.html;
    # error_page 404 410 401 413 /40x.html;

     # SSL config
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;
    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
    ssl_dhparam /etc/nginx/ssl-dhparams.pem;
    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    # HSTS disabled (ngx_http_headers_module is required) (63072000 seconds)
    # add_header Strict-Transport-Security "max-age=63072000" always;
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
}
